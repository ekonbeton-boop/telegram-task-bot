import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from datetime import datetime
import sqlite3
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            description TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            closed_at DATETIME,
            time_spent REAL,
            is_closed BOOLEAN DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
MAIN_MENU_KEYBOARD = [
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É"],
    ["üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"],
    ["üïó –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á—ë—Ç"]
]

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        context.user_data['awaiting_task_description'] = True
    elif text == "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É":
        await show_open_tasks_for_closing(update, context)
    elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ":
        await show_task_filters(update, context)
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        context.user_data['awaiting_delete_id'] = True
    elif text == "üïó –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á—ë—Ç":
        await set_daily(update, context)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_task_description'):
        description = update.message.text
        conn = sqlite3.connect('tasks.db')
        cursor = conn.cursor()
        cursor.execute('INSERT INTO tasks (description) VALUES (?)', (description,))
        conn.commit()
        task_id = cursor.lastrowid
        conn.close()

        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nID: {task_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        context.user_data['awaiting_task_description'] = False
        await show_main_menu(update, context)

    elif context.user_data.get('awaiting_time_input'):
        await handle_time_input(update, context)

    elif context.user_data.get('awaiting_delete_id'):
        await handle_delete_task(update, context)

    elif context.user_data.get('awaiting_edit_id'):
        await handle_edit_description(update, context)

    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞—á
async def show_task_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚è≥ –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ", callback_data="filter_open"),
            InlineKeyboardButton("‚úÖ –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ", callback_data="filter_closed"),
        ],
        [
            InlineKeyboardButton("üëÅÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="filter_all")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
async def show_tasks_by_filter(update: Update, context: ContextTypes.DEFAULT_TYPE, filter_type="all"):
    query = update.callback_query
    await query.answer()

    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()

    if filter_type == "open":
        cursor.execute('SELECT id, description, created_at, closed_at, time_spent, is_closed FROM tasks WHERE is_closed = 0 ORDER BY id DESC')
        title = "‚è≥ –û–¢–ö–†–´–¢–´–ï –ó–ê–î–ê–ß–ò"
    elif filter_type == "closed":
        cursor.execute('SELECT id, description, created_at, closed_at, time_spent, is_closed FROM tasks WHERE is_closed = 1 ORDER BY id DESC')
        title = "‚úÖ –ó–ê–ö–†–´–¢–´–ï –ó–ê–î–ê–ß–ò"
    else:
        cursor.execute('SELECT id, description, created_at, closed_at, time_spent, is_closed FROM tasks ORDER BY id DESC')
        title = "üìã –í–°–ï –ó–ê–î–ê–ß–ò"

    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        await query.edit_message_text(f"üì≠ {title}: –∑–∞–¥–∞—á –Ω–µ—Ç.")
        return

    await query.edit_message_text(f"üëá {title}:")

    for t in tasks:
        status = "‚úÖ –ó–ê–ö–†–´–¢–ê" if t[5] else "‚è≥ –û–¢–ö–†–´–¢–ê"
        msg = f"üîñ ID: {t[0]}\nüìù {t[1]}\nüìÜ –°–æ–∑–¥–∞–Ω–∞: {t[2]}\n{status}"

        if t[5]:
            msg += f"\nüïí –ó–∞–∫—Ä—ã—Ç–∞: {t[3]}\n‚è±Ô∏è –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {t[4]} —á."

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ–π
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{t[0]}"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{t[0]}"),
            ]
        ]
        if not t[5]:  # –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ó–∞–∫—Ä—ã—Ç—å"
            keyboard[0].insert(0, InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{t[0]}"))

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.effective_chat.send_message(msg, reply_markup=reply_markup)

# –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
async def show_open_tasks_for_closing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, description FROM tasks WHERE is_closed = 0 ORDER BY id')
    open_tasks = cursor.fetchall()
    conn.close()

    if not open_tasks:
        await update.message.reply_text("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
        return

    keyboard = []
    for task in open_tasks:
        keyboard.append([
            InlineKeyboardButton(f"ID {task[0]}: {task[1][:30]}...", callback_data=f"close_{task[0]}")
        ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É"
async def handle_close_task_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    task_id = int(query.data.split('_')[1])
    context.user_data['closing_task_id'] = task_id

    await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É ID {task_id}. –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —á–∞—Å–∞—Ö):")
    context.user_data['awaiting_time_input'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏
async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_time_input'):
        try:
            time_spent = float(update.message.text)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5).")
            return

        task_id = context.user_data['closing_task_id']

        conn = sqlite3.connect('tasks.db')
        cursor = conn.cursor()
        cursor.execute('SELECT description, is_closed FROM tasks WHERE id = ?', (task_id,))
        task = cursor.fetchone()

        if not task:
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if task[1]:
            await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!")
            return

        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            UPDATE tasks
            SET closed_at = ?, time_spent = ?, is_closed = 1
            WHERE id = ?
        ''', (now, time_spent, task_id))
        conn.commit()
        conn.close()

        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task[0]}\" –∑–∞–∫—Ä—ã—Ç–∞.\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {time_spent} —á.")
        context.user_data['awaiting_time_input'] = False
        await show_main_menu(update, context)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID (—á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç)
async def handle_delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        task_id = int(update.message.text)
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('SELECT description FROM tasks WHERE id = ?', (task_id,))
    task = cursor.fetchone()

    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ \"{task[0]}\" —É–¥–∞–ª–µ–Ω–∞.")
    context.user_data['awaiting_delete_id'] = False
    await show_main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π
async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    task_id = int(query.data.split('_')[1])

    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('SELECT description FROM tasks WHERE id = ?', (task_id,))
    task = cursor.fetchone()

    if not task:
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
        return

    cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()

    await query.edit_message_text(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ \"{task[0]}\" —É–¥–∞–ª–µ–Ω–∞.")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def handle_edit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    task_id = int(query.data.split('_')[1])
    context.user_data['editing_task_id'] = task_id

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    context.user_data['awaiting_edit_id'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
async def handle_edit_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_description = update.message.text
    task_id = context.user_data['editing_task_id']

    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('SELECT description FROM tasks WHERE id = ?', (task_id,))
    task = cursor.fetchone()

    if not task:
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    cursor.execute('UPDATE tasks SET description = ? WHERE id = ?', (new_description, task_id))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"‚úèÔ∏è –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: \"{new_description}\"")
    context.user_data['awaiting_edit_id'] = False
    await show_main_menu(update, context)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
async def set_daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    scheduler = context.application.bot_data.get('scheduler')

    if not scheduler:
        await update.message.reply_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    current_jobs = scheduler.get_jobs()
    for job in current_jobs:
        if job.name == str(chat_id):
            job.remove()

    scheduler.add_job(
        daily_report,
        trigger="cron",
        hour=9, minute=0,
        chat_id=chat_id,
        name=str(chat_id),
        replace_existing=True
    )

    await update.message.reply_text("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 09:00.")

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.kwargs.get('chat_id') or context.job.args[0] if context.job.args else None
    if not chat_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç—á—ë—Ç–∞")
        return

    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, description, created_at FROM tasks WHERE is_closed = 0')
    open_tasks = cursor.fetchall()
    conn.close()

    if not open_tasks:
        await context.bot.send_message(chat_id=chat_id, text="üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á.")
        return

    now = datetime.now()
    msg = "üìÖ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢ ‚Äî –û–¢–ö–†–´–¢–´–ï –ó–ê–î–ê–ß–ò:\n\n"
    for t in open_tasks:
        created = datetime.strptime(t[2], '%Y-%m-%d %H:%M:%S')
        delta = now - created
        days = delta.days
        hours = delta.seconds // 3600

        if days > 0:
            time_str = f"{days} –¥–Ω."
        else:
            time_str = f"{hours} —á."

        msg += f"ID: {t[0]} | {t[1]}\n–í–∏—Å–∏—Ç: {time_str}\n\n"

    await context.bot.send_message(chat_id=chat_id, text=msg)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ event loop
async def post_init(application: Application):
    scheduler = AsyncIOScheduler()
    scheduler.start()
    application.bot_data['scheduler'] = scheduler
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()

    # üîë –¢–û–ö–ï–ù
    application = Application.builder().token("8296163167:AAHPn-gjTODYfao8G7_aWY8nEsczGgSwiJY").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^(‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É|‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É|üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ|üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É|üïó –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á—ë—Ç)$"), handle_main_menu))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))
    application.add_handler(CallbackQueryHandler(show_tasks_by_filter, pattern="^filter_(open|closed|all)$"))
    application.add_handler(CallbackQueryHandler(handle_close_task_callback, pattern=r"^close_\d+$"))
    application.add_handler(CallbackQueryHandler(handle_delete_callback, pattern=r"^delete_\d+$"))
    application.add_handler(CallbackQueryHandler(handle_edit_callback, pattern=r"^edit_\d+$"))

    # –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    application.add_handler(CommandHandler("add", add_task))
    application.add_handler(CommandHandler("close", close_task))
    application.add_handler(CommandHandler("list", list_tasks))
    application.add_handler(CommandHandler("setdaily", set_daily))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    application.post_init = post_init

    # –ó–∞–ø—É—Å–∫
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>")
        return
    description = ' '.join(context.args)
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO tasks (description) VALUES (?)', (description,))
    conn.commit()
    task_id = cursor.lastrowid
    conn.close()
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nID: {task_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}")

async def close_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /close <id> <—á–∞—Å—ã>")
        return
    try:
        task_id = int(context.args[0])
        time_spent = float(context.args[1])
    except ValueError:
        await update.message.reply_text("ID –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
        return
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('SELECT description, is_closed FROM tasks WHERE id = ?', (task_id,))
    task = cursor.fetchone()
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if task[1]:
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!")
        return
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('UPDATE tasks SET closed_at = ?, time_spent = ?, is_closed = 1 WHERE id = ?', (now, time_spent, task_id))
    conn.commit()
    conn.close()
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task[0]}\" –∑–∞–∫—Ä—ã—Ç–∞.\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {time_spent} —á.")

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_task_filters(update, context)

if __name__ == '__main__':
    main()
