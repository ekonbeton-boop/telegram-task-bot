from flask import Flask, render_template, request, redirect, url_for, jsonify, flash, session
import sqlite3
from datetime import datetime
import os

app = Flask(__name__)
app.secret_key = 'super_secret_key_2025'  # üîê –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–π

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è (–∏–∑–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏!)
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "password123"

DATABASE = 'tasks.db'

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

# üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
def login_required(f):
    def wrap(*args, **kwargs):
        if 'logged_in' not in session:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'warning')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    wrap.__name__ = f.__name__
    return wrap

# üîê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
            session['logged_in'] = True
            session['username'] = username
            flash('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!', 'success')
            return redirect(url_for('index'))
        else:
            flash('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'danger')
    return render_template('login.html')

# üîê –í—ã—Ö–æ–¥
@app.route('/logout')
def logout():
    session.clear()
    flash('üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.', 'info')
    return redirect(url_for('login'))

# üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
@app.route('/')
@login_required
def index():
    filter_status = request.args.get('filter', 'all')

    conn = get_db_connection()
    if filter_status == 'open':
        tasks = conn.execute('SELECT * FROM tasks WHERE is_closed = 0 ORDER BY id DESC').fetchall()
    elif filter_status == 'closed':
        tasks = conn.execute('SELECT * FROM tasks WHERE is_closed = 1 ORDER BY id DESC').fetchall()
    else:
        tasks = conn.execute('SELECT * FROM tasks ORDER BY id DESC').fetchall()
    conn.close()

    return render_template('index.html', tasks=tasks, filter=filter_status)

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@app.route('/add', methods=['POST'])
@login_required
def add_task():
    description = request.form['description'].strip()
    if not description:
        flash('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!', 'danger')
        return redirect(url_for('index'))

    conn = get_db_connection()
    conn.execute('INSERT INTO tasks (description) VALUES (?)', (description,))
    conn.commit()
    conn.close()

    flash('‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success')
    return redirect(url_for('index'))

# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
@app.route('/edit/<int:task_id>', methods=['POST'])
@login_required
def edit_task(task_id):
    description = request.form['description'].strip()
    if not description:
        return jsonify({'error': '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400

    conn = get_db_connection()
    conn.execute('UPDATE tasks SET description = ? WHERE id = ?', (description, task_id))
    conn.commit()
    conn.close()

    return jsonify({'success': True})

# ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏
@app.route('/close/<int:task_id>', methods=['POST'])
@login_required
def close_task(task_id):
    try:
        time_spent = float(request.form['time_spent'])
    except ValueError:
        return jsonify({'error': '–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º'}), 400

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    conn = get_db_connection()
    conn.execute('''
        UPDATE tasks
        SET closed_at = ?, time_spent = ?, is_closed = 1
        WHERE id = ?
    ''', (now, time_spent, task_id))
    conn.commit()
    conn.close()

    return jsonify({'success': True})

# üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@app.route('/delete/<int:task_id>', methods=['POST'])
@login_required
def delete_task(task_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()

    return jsonify({'success': True})

# üìä API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@app.route('/api/stats')
@login_required
def stats():
    conn = get_db_connection()
    total = conn.execute('SELECT COUNT(*) FROM tasks').fetchone()[0]
    open_count = conn.execute('SELECT COUNT(*) FROM tasks WHERE is_closed = 0').fetchone()[0]
    closed_count = conn.execute('SELECT COUNT(*) FROM tasks WHERE is_closed = 1').fetchone()[0]

    avg_time_row = conn.execute('SELECT AVG(time_spent) FROM tasks WHERE is_closed = 1').fetchone()
    avg_time = round(avg_time_row[0], 2) if avg_time_row[0] else 0

    top_long_tasks = conn.execute('''
        SELECT description, time_spent
        FROM tasks
        WHERE is_closed = 1 AND time_spent IS NOT NULL
        ORDER BY time_spent DESC
        LIMIT 5
    ''').fetchall()

    conn.close()

    return jsonify({
        'total': total,
        'open': open_count,
        'closed': closed_count,
        'avg_time': avg_time,
        'top_long_tasks': [dict(row) for row in top_long_tasks]
    })

# üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
import pandas as pd
from io import BytesIO
from flask import send_file

@app.route('/export')
@login_required
def export_excel():
    conn = get_db_connection()
    tasks = conn.execute('''
        SELECT
            id,
            description,
            created_at,
            closed_at,
            time_spent,
            CASE WHEN is_closed = 1 THEN '–ó–∞–∫—Ä—ã—Ç–∞' ELSE '–û—Ç–∫—Ä—ã—Ç–∞' END as status
        FROM tasks
        ORDER BY id DESC
    ''').fetchall()
    conn.close()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    df = pd.DataFrame(tasks, columns=['ID', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°–æ–∑–¥–∞–Ω–∞', '–ó–∞–∫—Ä—ã—Ç–∞', '–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —á–∞—Å–æ–≤', '–°—Ç–∞—Ç—É—Å'])

    # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='–ó–∞–¥–∞—á–∏')
    output.seek(0)

    return send_file(
        output,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        download_name='tasks_export.xlsx',
        as_attachment=True
    )

if __name__ == '__main__':
    if not os.path.exists(DATABASE):
        print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ Telegram-–±–æ—Ç–∞ (main.py), —á—Ç–æ–±—ã –æ–Ω–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å.")
        exit(1)

    print("üåê –ó–∞–ø—É—Å–∫–∞—é –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
    print("üîë –õ–æ–≥–∏–Ω: admin | –ü–∞—Ä–æ–ª—å: password123")
    print("–û—Ç–∫—Ä–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://127.0.0.1:5000")
    app.run(debug=True)
